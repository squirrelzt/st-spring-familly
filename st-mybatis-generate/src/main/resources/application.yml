spring:
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
  datasource:
    driver-class-name: org.hsqldb.jdbcDriver
    schema: classpath:sql/schema.sql #，每次启动程序，程序都会运行schema.sql文件，对数据库的数据操作
    url: jdbc:hsqldb:mem://localhost/testdb;shutdown=true #shutdown=true一定要写，否则springboot可能管理不了
    username: sa
    password: sa
#    type: com.alibaba.druid.pool.DruidDataSource
#    druid:
#      initial-size: 10   #初连接池启动时的初始值
#      max-active: 10000  #连接池的最大值
#      min-idle: 5 #最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请
#      max-wait: 6000 #最大等待值,单位毫秒.配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁
#      pool-prepared-statements: false #打开PSCache，并且指定每个连接上PSCache的大小,是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭
#      max-pool-prepared-statement-per-connection-size: 20 #
#      max-open-prepared-statements: 10 #要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
#      validation-query: select 1 #用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用
#      validation-query-timeout: 1 #单位:秒，检测连接是否有效的超时时间。底层调用jdbc Statement对象的void. setQueryTImeout(int seconds)方法,mysql实现的不是很合理，不建议在mysql下配置此参数
#      test-on-borrow: true #申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
#      test-on-return: true #归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
#      test-while-idle: true #建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效
#      time-between-eviction-runs-millis: 10000 #配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 default=1分钟.有两个含义：1) Destroy线程会检测连接的间隔时间2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
#      min-evictable-idle-time-millis: 30001

